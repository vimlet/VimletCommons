<%
function getFileName(file) {
  return file.replace(/^.*[\\\/]/, '');
}
function newLine() {
  echo("\n");
}
var PRIVATE = "private";
%># <% echo(getFileName(data.path));%>

## Public Properties
|Property|Type|Description|
|---|---|---|
<% data.properties.forEach(function(prop){
  if(!prop.scope || prop.scope != PRIVATE){
  var publicPropRow = "";
  publicPropRow += "|" + prop.name + "|";
    if(prop.type){
      publicPropRow += prop.type + "|";
    }else{
      publicPropRow += "-" + "|";
    }
    if(prop.description){
      publicPropRow += prop.description + "|\n";
    }else{
      publicPropRow += "-" + "|\n";
    }
    echo(publicPropRow);
  }
});
%>


## Private Properties
|Property|Type|Description|
|---|---|---|
<% data.properties.forEach(function(prop){
  if(prop.scope && prop.scope === PRIVATE){
  var privatePropRow = "";
  privatePropRow += "|" + prop.name + "|";
    if(prop.type){
      privatePropRow += prop.type + "|";
    }else{
      privatePropRow += "-" + "|";
    }
    if(prop.description){
      privatePropRow += prop.description + "|\n";
    }else{
      privatePropRow += "-" + "|\n";
    }
    echo(privatePropRow);
  }
});
%>

## Public Functions

<% data.methods.forEach(function(method){
  if(!method.scope || method.scope != PRIVATE){
    echo('#### ' + method.name);
    if(method.description){
      newLine();
      newLine();
      echo('> ' + method.description);
    }

    if (method.params.length > 0) {
      newLine();
      newLine();
      echo('>|Parameter|Type|description|\n');
      echo('>|---|---|---|\n');
        for(var methodParamI = 0; methodParamI < method.params.length; methodParamI++){
        var publicFunctionParam = ">";
        publicFunctionParam += "|" + method.params[methodParamI].name + "|";
        if(method.params[methodParamI].type){
          publicFunctionParam += method.params[methodParamI].type + "|";
        }else{
          publicFunctionParam += "-|";
        }
        if(method.params[methodParamI].description){
          publicFunctionParam += method.params[methodParamI].description + "|";
        }else{
          publicFunctionParam += "-|";
        }
        echo(publicFunctionParam);
      }
    }

    if(method.return){
      newLine();
      newLine();
      echo('>|Return|description|\n');
      echo('>|---|---|\n');
      var publicFunctionReturn = ">";
      publicFunctionReturn += "|" + method.return.type + "|";
      if(method.return.description){
        publicFunctionReturn += method.return.description + "|";
      }else{
        publicFunctionReturn += "-|";
      }
      echo(publicFunctionReturn);
    }

    if (method.exceptions.length > 0) {
      newLine();
      newLine();
      echo('>|Exception|description|\n');
      echo('>|---|---|\n');
        for(var methodExcpI = 0; methodExcpI < method.exceptions.length; methodExcpI++){
        var publicFunctionExcp = ">";
        publicFunctionExcp += "|" + method.exceptions[methodExcpI].name + "|";
        if(method.exceptions[methodExcpI].description){
          publicFunctionExcp += method.exceptions[methodExcpI].description + "|";
        }else{
          publicFunctionExcp += "-|";
        }
        echo(publicFunctionExcp);
      }
    }
    newLine();
    newLine();
  }
});
%>



## Private Functions

<% data.methods.forEach(function(method){
  if(method.scope && method.scope === PRIVATE){
    echo('#### ' + method.name);
    if(method.description){
      newLine();
      newLine();
      echo('> ' + method.description);
    }

    if (method.params.length > 0) {
      newLine();
      newLine();
      echo('>|Parameter|Type|description|\n');
      echo('>|---|---|---|\n');
        for(var methodParamI = 0; methodParamI < method.params.length; methodParamI++){
        var publicFunctionParam = ">";
        publicFunctionParam += "|" + method.params[methodParamI].name + "|";
        if(method.params[methodParamI].type){
          publicFunctionParam += method.params[methodParamI].type + "|";
        }else{
          publicFunctionParam += "-|";
        }
        if(method.params[methodParamI].description){
          publicFunctionParam += method.params[methodParamI].description + "|";
        }else{
          publicFunctionParam += "-|";
        }
        echo(publicFunctionParam);
      }
    }

    if(method.return){
      newLine();
      newLine();
      echo('>|Return|description|\n');
      echo('>|---|---|\n');
      var publicFunctionReturn = ">";
      publicFunctionReturn += "|" + method.return.type + "|";
      if(method.return.description){
        publicFunctionReturn += method.return.description + "|";
      }else{
        publicFunctionReturn += "-|";
      }
      echo(publicFunctionReturn);
    }

    if (method.exceptions.length > 0) {
      newLine();
      newLine();
      echo('>|Exception|description|\n');
      echo('>|---|---|\n');
        for(var methodExcpI = 0; methodExcpI < method.exceptions.length; methodExcpI++){
        var publicFunctionExcp = ">";
        publicFunctionExcp += "|" + method.exceptions[methodExcpI].name + "|";
        if(method.exceptions[methodExcpI].description){
          publicFunctionExcp += method.exceptions[methodExcpI].description + "|";
        }else{
          publicFunctionExcp += "-|";
        }
        echo(publicFunctionExcp);
      }
    }
    newLine();
    newLine();
  }
  newLine();
  newLine();
});
%>
