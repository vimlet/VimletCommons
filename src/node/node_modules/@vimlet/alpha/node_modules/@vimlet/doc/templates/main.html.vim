<%
var PRIVATE = "private";
%>
  <%
function getFileName(file) {
  return file.replace(/^.*[\\\/]/, '');
}
function tableRow(data, className, onclickFunc){
  if(data){
    if(!onclickFunc){
      echo('<div class = "' + className + '">' + data + '</div>');
    }else{
      echo('<div class = "' + className + '" onclick="' + onclickFunc + '">' + data + '</div>');
    }
  }else{
    echo('<div class = "' + className + '"></div>');
  }
}


function getProp(prop){
  tableRow(prop.name, "rowColumn rowColumn100 textColorName");
  tableRow(prop.type, "rowColumn rowColumn100 textColorType");
  tableRow(prop.description, "rowColumn");
}


function getFuncIndex(method){
  if(method.return){
    tableRow(method.return.type, "rowColumn rowColumn100 textColorType");
  }else{
    tableRow(null, "rowColumn rowColumn100");
  }
  tableRow(method.name, "rowColumn link textColorFunction", "goTo('func" + method.name + "')");
  echo('</div>');
}

function getFuncDetail(method){
  echo('<div class="subBox" id="func' + method.name + '">');
    echo('<div class="subBoxTitle textColorFunction"><h3>' + method.name);
          if (method.params.length > 0) {
            for(var methodParamI = 0; methodParamI < method.params.length; methodParamI++){
              if(methodParamI === 0){
                echo('(');
              }
              echo('<span class="textColorName">' + method.params[methodParamI].name);
              if(method.params[methodParamI].optional){
              echo('*');
              }
              echo('</span>');
              if(methodParamI < (method.params.length -1)){
                echo(', ');
              }else{
                echo(')');
              }
            }
        echo('</h3></div>');
          }else{
      echo('</h3></div>');
          }
    echo('<div class="functionDetails">');

      if (method.description) {
        echo('<div class="margin10">' + method.description + '</div>');
      }

      if (method.params.length > 0) {
        echo('<div class="table">');
        var methodParamTable = '';
        methodParamTable += '<div class="row tableHeader">';
        methodParamTable += '<div class="rowColumn rowColumn100">Parameter</div>';
        methodParamTable += '<div class="rowColumn rowColumn100">Type</div>';
        methodParamTable += '<div class="rowColumn">Description</div>';
        methodParamTable += '</div>';
        echo(methodParamTable);
          var pairMethodParam = false;
          method.params.forEach(function(param) {
            if(pairMethodParam){
              echo('<div class = "row rowBack1">');
              }else{
                echo('<div class = "row rowBack0">');
                }
                pairMethodParam = !pairMethodParam;
                var pName = param.name;
                if(param.optional){
                pName += " (optional)";
                }
                tableRow(pName, "rowColumn rowColumn100 textColorName");
                tableRow(param.type, "rowColumn rowColumn100 textColorType");
                tableRow(param.description, "rowColumn");
                echo('</div>');
              });
              echo('</div>');
            }

            if (method.return) {
              echo('<div class="table">');
              var methodReturnTable = '';
              methodReturnTable += '<div class="row tableHeader">';
              methodReturnTable += '<div class="rowColumn rowColumn100">Return</div>';
              methodReturnTable += '<div class="rowColumn">Description</div>';
              methodReturnTable += '</div>';
              echo(methodReturnTable);
                echo('<div class = "row rowBack1">');
                  tableRow(method.return.type, "rowColumn rowColumn100 textColorType");
                  tableRow(method.return.description, "rowColumn");
                  echo('</div>');
                  echo('</div>');
                }

                if (method.exceptions.length > 0) {
                  echo('<div class="table">');
                                var methodExceptionTable = '';
                                methodExceptionTable += '<div class="row tableHeader">';
                                methodExceptionTable += '<div class="rowColumn rowColumn100">Exception</div>';
                                methodExceptionTable += '<div class="rowColumn">Description</div>';
                                methodExceptionTable += '</div>';
                                echo(methodExceptionTable);
                    var pairMethodExcpt = false;
                    method.exceptions.forEach(function(except) {
                      if(pairMethodExcpt){
                        echo('<div class = "row rowBack1">');
                        }else{
                          echo('<div class = "row rowBack0">');
                          }
                          pairMethodExcpt = !pairMethodExcpt;
                          tableRow(except.name, "rowColumn rowColumn100");
                          tableRow(except.description, "rowColumn");
                          echo('</div>');
                        });
                        echo('</div>');
                      }
                      echo('</div>');
                      echo('</div>');
                    }
                    %>
    <!DOCTYPE html>
    <html>

    <head>
      <meta charset="utf-8"
           name="viewport"
           content="width=device-width, initial-scale=1.0">
      <link rel="stylesheet"
           href="style.css">
    </head>

    <body>
      <div id="main">
        <div id="menu">
          <div class="button"
               onclick="goTo('header');">Header</div>
          <div class="button"
               id="menuPropertiesButton"
               onclick="activeMenu('menuPropertiesH');">Properties
            <div class="menuHover"
                 id="menuPropertiesH"><input class="searchInput"
                   id="propertySearchInput"
                   type="search"
                   placeholder="Search"
                   onsearch="searchProperties(this.value);"
                   onkeyup="searchProperties(this.value);">

              <div class="menuSearchData">
                <%
                          data.properties.forEach(function(prop){
                            var propMenuClass = 'subMenuHover propertyMenuSearch';
                            if(prop.scope && prop.scope.toLowerCase() === PRIVATE){
                              propMenuClass += ' privateElement hidePrivate';
                            }
                            echo("<div class='" + propMenuClass + "' onclick='goTo(&quot;prop" + prop.name + "&quot;)'>" + prop.name + "</div>");
                          });
                          %>
              </div>
            </div>
          </div>
          <div class="button"
               id="menuFunctionsButton"
               onclick="activeMenu('menuFunctionsH');">Functions
            <div class="menuHover"
                 id="menuFunctionsH"><input class="searchInput"
                   id="functionSearchInput"
                   type="search"
                   placeholder="Search"
                   onsearch="searchFunctions(this.value);"
                   onkeyup="searchFunctions(this.value);">

              <div class="menuSearchData">
                <%
                      data.methods.forEach(function(method){
                        var funcMenuClass = 'subMenuHover functionMenuSearch';
                        if(method.scope && method.scope.toLowerCase() === PRIVATE){
                          funcMenuClass += ' privateElement hidePrivate';
                        }
                        echo("<div class='" + funcMenuClass + "' onclick='goTo(&quot;func" + method.name + "&quot;)'>" + method.name + "</div>");
                      });
                      %>
              </div>
            </div>
          </div>
          <div class="button"
               id="togglePrivate"
               onclick="showPrivate()">Show private API</div>

        </div>

        <div id="content">
          <div id="header">
            <h1><% echo(getFileName(data.path));%></h1>
            <% if(data.header){echo(data.header);}%>
          </div>


          <div class="box"
               id="properties">
            <div class="subBoxTitle">
              <h2>Properties</h2></div>
            <div class="table">
              <div class="row tableHeader">
                <div class="rowColumn rowColumn100">Property</div>
                <div class="rowColumn rowColumn100">Type</div>
                <div class="rowColumn">Description</div>
              </div>
              <%
                      var pairProp = false;
                      data.properties.forEach(function(prop){
                        if(!prop.scope || prop.scope != PRIVATE){
                          if(pairProp){
                            echo('<div class = "row rowBack1" id="prop' + prop.name + '">');
                            }else{
                              echo('<div class = "row rowBack0" id="prop' + prop.name + '">');
                              }
                              pairProp = !pairProp;
                              getProp(prop);
                              echo('</div>');
                            }
                          });
                          %>
            </div>
          </div>

          <div class="box privateElement hidePrivate"
               id="propertiesPriv">
            <div class="subBoxTitle">
              <h2>Private Properties</h2></div>
            <div class="table">
              <div class="row tableHeader">
                <div class="rowColumn rowColumn100">Property</div>
                <div class="rowColumn rowColumn100">Type</div>
                <div class="rowColumn">Description</div>
              </div>
              <%
                          var pairPropPriv = false;
                          data.properties.forEach(function(prop){
                            if(prop.scope && prop.scope === PRIVATE){
                              if(pairPropPriv){
                                echo('<div class = "row rowBack1" id="prop' + prop.name + '">');
                                }else{
                                  echo('<div class = "row rowBack0" id="prop' + prop.name + '">');
                                  }
                                  pairPropPriv = !pairPropPriv;
                                  getProp(prop);
                                  echo('</div>');
                                }
                              });
                              %>
            </div>
          </div>


          <div class="box"
               id="functions">
            <div class="subBoxTitle">
              <h2>Functions</h2>
              <h4 class="hideOnSmallS">Summary</h4></div>
            <div>
              <div class="table hideOnSmallS">
                <div class="row tableHeader">
                  <div class="rowColumn rowColumn100">Return</div>
                  <div class="rowColumn">Function</div>
                </div>
                <%
                                var pairFuncIndex = false;
                                data.methods.forEach(function(method){
                                  if(!method.scope || method.scope != PRIVATE){
                                    if(pairFuncIndex){
                                      echo('<div class = "row rowBack1">');
                                      }else{
                                        echo('<div class = "row rowBack0">');
                                        }
                                        pairFuncIndex = !pairFuncIndex;
                                        getFuncIndex(method);
                                      }
                                    });
                                    %>
              </div>
              <div class="margin10">
                <h4 class="hideOnSmallS">Details</h4></div>
              <div>
                <%
                                      data.methods.forEach(function(method){
                                        if(!method.scope || method.scope != PRIVATE){
                                          getFuncDetail(method);
                                        }
                                      });
                                      %>
              </div>
            </div>
          </div>



          <div class="box privateElement hidePrivate"
               id="functionsPriv">
            <div class="subBoxTitle">
              <h2>Private Functions</h2>
              <h4>Summary</h4></div>
            <div>
              <div class="table">
                <div class="row tableHeader">
                  <div class="rowColumn rowColumn100">Return</div>
                  <div class="rowColumn">Function</div>
                </div>
                <%
                                      var pairFuncIndex = false;
                                      data.methods.forEach(function(method){
                                        if(method.scope && method.scope === PRIVATE){
                                          if(pairFuncIndex){
                                            echo('<div class = "row rowBack1">');
                                            }else{
                                              echo('<div class = "row rowBack0">');
                                              }
                                              pairFuncIndex = !pairFuncIndex;
                                              getFuncIndex(method);
                                            }
                                          });
                                          %>
              </div>
              <div class="margin10">
                <h4>Details</h4></div>
              <div>
                <%
                                            data.methods.forEach(function(method){
                                              if(method.scope && method.scope === PRIVATE){
                                                getFuncDetail(method);
                                              }
                                            });
                                            %>
              </div>
            </div>
          </div>





        </div>
      </div>

      <script>
        function showPrivate() {
          var privates = document.querySelectorAll(".privateElement");
          var showButton = document.querySelector("#togglePrivate");
          if (showButton.innerHTML.indexOf("Show") > -1) {
            privates.forEach(function(priv) {
              priv.classList.remove("hidePrivate");
            });
            showButton.innerHTML = "Hide private API";
          } else {
            privates.forEach(function(priv) {
              priv.classList.add("hidePrivate");
            });
            showButton.innerHTML = "Show private API";
          }
        }

        function searchProperties(value) {
          val = value.toLowerCase().toLowerCase();
          var elements = document.querySelectorAll(".propertyMenuSearch");
          elements.forEach(function(elem) {
            elem.classList.remove("menuSearchHide");
            if (elem.innerHTML.toLowerCase().indexOf(val) === -1) {
              elem.classList.add("menuSearchHide")
            }
          });
        }

        function searchFunctions(value) {
          val = value.toLowerCase().toLowerCase();
          var elements = document.querySelectorAll(".functionMenuSearch");
          elements.forEach(function(elem) {
            elem.classList.remove("menuSearchHide");
            if (elem.innerHTML.toLowerCase().indexOf(val) === -1) {
              elem.classList.add("menuSearchHide")
            }
          });
        }

        function goTo(id) {
          location.href = "#" + id;
          window.scrollBy(0, -50);
        }

        function activeMenu(id) {
          var menuElement = document.querySelector('#' + id);
          menuElement.classList.add('showMenuFlex');
          menuElement.parentElement.classList.add('showMenuActive');
        }

        function deactiveMenu(id) {
          var menuElement = document.querySelector('#' + id);
          menuElement.classList.remove('showMenuFlex');
          menuElement.parentElement.classList.remove('showMenuActive');
        }

        /* Detect click for closing menus */
        document.onclick = function(event) {
          if (event === undefined) event = window.event;
          var target = 'target' in event ? event.target : event.srcElement;

          if (target.id != "menuPropertiesButton" && !target.classList.contains("searchInput")) {
            deactiveMenu("menuPropertiesH");
          }
          if (target.id != "menuFunctionsButton" && !target.classList.contains("searchInput")) {
            deactiveMenu("menuFunctionsH");
          }
        };
      </script>
    </body>

    </html>
